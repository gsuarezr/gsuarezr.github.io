---
interface Course {
  id: string;
  name: string;
  prerequisites: string[];
  description: string;
  semester: number;
}

interface Props {
  courses: Course[];
}

const { courses } = Astro.props;
---

<div class="curriculum-map">
  <div id="curriculum-container" class="w-full h-[800px] bg-white dark:bg-gray-800 rounded-lg shadow-sm p-4"></div>
</div>

<script>
  import * as d3 from 'd3';

  function createCurriculumMap(courses) {
    const container = document.getElementById('curriculum-container');
    if (!container) return;

    const width = container.clientWidth;
    const height = container.clientHeight;
    const margin = { top: 40, right: 40, bottom: 40, left: 40 };

    // Clear previous content
    container.innerHTML = '';

    const svg = d3.select('#curriculum-container')
      .append('svg')
      .attr('width', width)
      .attr('height', height);

    // Create the graph data
    const nodes = courses.map(course => ({
      id: course.id,
      name: course.name,
      semester: course.semester,
      description: course.description
    }));

    const links = courses.flatMap(course =>
      course.prerequisites.map(prereq => ({
        source: prereq,
        target: course.id
      }))
    );

    // Create the force simulation
    const simulation = d3.forceSimulation(nodes)
      .force('link', d3.forceLink(links).id(d => d.id))
      .force('charge', d3.forceManyBody().strength(-1000))
      .force('x', d3.forceX(width / 2))
      .force('y', d3.forceY(d => margin.top + (d.semester - 1) * (height - margin.top - margin.bottom) / 8));

    // Draw the links
    const link = svg.append('g')
      .selectAll('line')
      .data(links)
      .join('line')
      .attr('stroke', '#999')
      .attr('stroke-opacity', 0.6)
      .attr('stroke-width', 2)
      .attr('marker-end', 'url(#arrow)');

    // Define arrow marker
    svg.append('defs').append('marker')
      .attr('id', 'arrow')
      .attr('viewBox', '0 -5 10 10')
      .attr('refX', 20)
      .attr('refY', 0)
      .attr('markerWidth', 6)
      .attr('markerHeight', 6)
      .attr('orient', 'auto')
      .append('path')
      .attr('fill', '#999')
      .attr('d', 'M0,-5L10,0L0,5');

    // Draw the nodes
    const node = svg.append('g')
      .selectAll('g')
      .data(nodes)
      .join('g')
      .call(d3.drag()
        .on('start', dragstarted)
        .on('drag', dragged)
        .on('end', dragended));

    // Add circles for nodes
    node.append('circle')
      .attr('r', 30)
      .attr('fill', '#fff')
      .attr('stroke', '#3b82f6')
      .attr('stroke-width', 2);

    // Add text labels
    node.append('text')
      .text(d => d.name)
      .attr('text-anchor', 'middle')
      .attr('dy', '.35em')
      .attr('font-size', '12px')
      .attr('fill', 'currentColor');

    // Add tooltips
    node.append('title')
      .text(d => d.description);

    // Update positions on simulation tick
    simulation.on('tick', () => {
      link
        .attr('x1', d => d.source.x)
        .attr('y1', d => d.source.y)
        .attr('x2', d => d.target.x)
        .attr('y2', d => d.target.y);

      node
        .attr('transform', d => `translate(${d.x},${d.y})`);
    });

    // Drag functions
    function dragstarted(event) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      event.subject.fx = event.subject.x;
      event.subject.fy = event.subject.y;
    }

    function dragged(event) {
      event.subject.fx = event.x;
      event.subject.fy = event.y;
    }

    function dragended(event) {
      if (!event.active) simulation.alphaTarget(0);
      event.subject.fx = null;
      event.subject.fy = null;
    }
  }

  // Initialize the map when the data is available
  const courses = JSON.parse(document.currentScript?.getAttribute('data-courses') || '[]');
  window.addEventListener('load', () => createCurriculumMap(courses));
  window.addEventListener('resize', () => createCurriculumMap(courses));
</script>